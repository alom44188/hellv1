#!/usr/bin/env node

/**
 * Core dependencies.
 */

var fs = require('fs');
var path = require('path');

/**
 * External dependencies.
 */

var electron = require('electron');
var load = require('refractory')(module, '../lib/hell/formatters', '{{HOME}}/.hell/formatters');
var find = require('fine');

/**
 * Internal dependencies.
 */

var hell = require('..');

/**
 * Ignore paths.
 */

var ignore = [];

/**
 * "Print" something to `stream`.
 *
 * @param {Array|String} messages
 * @param {WritableStream} stream
 * @api private
 */

function printStream(messages, stream) {
  if (!Array.isArray(messages)) messages = [messages];
  stream.write('\n');
  messages.forEach(function(msg) {
    stream.write('    ' + msg + '\n');
  });
  stream.write('\n');
};

/**
 * Print message(es) to stdout.
 *
 * @param {Array|String} messages
 * @api private
 */

function print(arr) {
  printStream(arr, process.stdout);
}

/**
 * Print message(es) to stderr.
 *
 * @param {Array|String} messages
 * @api private
 */

function error(arr) {
  printStream(arr, process.stderr);
}

var program = electron('hell')
  .name('Hell')
  .desc('Understand your codez.')
  .theme('simple', {
    command: 'absent',
    usage: '<options> <path>'
  })
  .version(require('../package.json', 'utf8').version)

program
  .command('default')
  .action(runHell);
  
program
  .command('absent')
  .option('--ignore <path>', 'specify path to ignore')
  .option('--min [20]', 'specify min score')
  .option('--all', 'include source file total in the list')
  .option('-f, --formatter [rank]', 'specify formatter to use')
  .option('-F, --formatters', 'display all formatters')
  .action(runHell);
  
function runHell(argv) {
  var ignore = argv.param('ignore');
  var target = argv.commands[0];
  var formatter = argv.param('f', 'formatter') || 'rank';
  var Formatter = null;
  var options = {
    all: argv.param('all'),
    min: argv.param('min') || 20
  };
 
  if (argv.mode('F', 'formatters')) {
    var all = fs.readdirSync(path.join(__dirname, '..', 'lib', 'hell', 'formatters'));

    var formatters = all.filter(function(file) {
      return !/^\./.test(file);
    }).map(function(file) {
      return file.replace(/\.js$/, '');
    });

    print(formatters);
    process.exit();
  }
  
  if (!target) {
    error('Please specify a path');
    process.exit(1);
  }
  
  try {
    Formatter = load(formatter);
  } catch (err) {
    error(err);
    error('Invalid formatter: ' + program.formatter);
    process.exit(1);
  }

  // Analyze & build reports
  if ('string' === typeof ignore) ignore = [ ignore ];
  
  var files = find(target, { ext: '.js', ignore: ignore });
  var result = hell.process(files);
  var formatter = new Formatter(result, process.stdout, options);

  // Print the results

  formatter.run();
}

// Parse the arguments

program.parse();